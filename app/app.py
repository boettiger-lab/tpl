import streamlit as st
import leafmap.maplibregl as leafmap
from cng.h3 import *
from utils import *
from ibis import _

current_tables = con.list_tables()

if "mydata" not in set(current_tables):
    con.create_table("mydata", database_geom)
    
chatbot_data = con.table("mydata")


st.set_page_config(layout="wide",
                   page_title="TPL Conservation Almanac",
                   page_icon=":globe:")

'''
# TPL Conservation Almanac
A data visualization tool built for the Trust for Public Land
'''
from datetime import time

with st.sidebar:
    style_choice = st.radio("Color by:", style_options)
    paint = style_options[style_choice]
    st.divider()

    # st.markdown("Filters")
    year_range = st.slider(
    "Year", min_value = 1988, max_value = 2025, value=(1988, 2025)
)
    st.divider()

    state_choice = st.selectbox("State", states,index = 6, placeholder='Pick a state')
    one_state = state_choice[0] != 'All'
    counties = get_counties(state_choice)
    if one_state:
        county_choice = st.selectbox("County", counties, index = 0, placeholder='Select a county')
    else:
        county_choice = None

    st.divider()

# even if we only pick 1 state or 1 gap code, make them lists so it still works with our functions 
if isinstance(state_choice, str):
    state_choice = [state_choice]  # convert single string to list

## Respond to sidebar
m = leafmap.Map(style = "positron")
# m.add_basemap('NASAGIBS.BlueMarble')

# get all the ids that correspond to the filter
gdf = filter_data(tpl_table, state_choice, county_choice, year_range)
gdf_landvote = filter_data(landvote_table, state_choice, county_choice, year_range)
ids = gdf.execute()['TPL_ID'].tolist()
unique_ids = list(set(ids))

chatbot_container = st.container()
with chatbot_container:
    llm_left_col, llm_right_col = st.columns([5,1], vertical_alignment = "bottom")
    with llm_left_col:
        with st.popover("üí¨ Example Queries"):
            '''
            Mapping queries: 
            - Show me the most expensive protected site
            - Show me sites owned, managed or sponsored by the Trust for Public Land
            '''

            '''
            Exploratory data queries:
            - Which states have the highest average cost per acre?
            '''
            
            st.info('If the map appears blank, queried data may be too small to see at the default zoom level. Check the table below the map, as query results will also be displayed there.', icon="‚ÑπÔ∏è")
    
    with llm_right_col:
        llm_choice = st.selectbox("Select LLM:", llm_options, key = "llm", help = "Select which model to use.")   
        llm = llm_options[llm_choice]

        
##### Chatbot stuff 
from pydantic import BaseModel, Field
class SQLResponse(BaseModel):
    """Defines the structure for SQL response."""
    sql_query: str = Field(description="The SQL query generated by the assistant.")
    explanation: str = Field(description="A detailed explanation of how the SQL query answers the input question.")

with open('app/system_prompt.txt', 'r') as file:
    template = file.read()

from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
prompt = ChatPromptTemplate.from_messages([
    ("system", template),
    ("human", "{input}")
]).partial(dialect="duckdb", table_info = chatbot_data.schema())

# chatbot_toggles = {key: False for key in keys}
structured_llm = llm.with_structured_output(SQLResponse)
few_shot_structured_llm = prompt | structured_llm


def run_sql(query,paint):
    """
    Filter data based on an LLM-generated SQL query and return matching IDs.

    Args:
        query (str): The natural language query to filter the data.
        color_choice (str): The column used for plotting.
    """
    output = few_shot_structured_llm.invoke(query)
    sql_query = output.sql_query
    explanation =output.explanation
    if not sql_query: # if the chatbot can't generate a SQL query.
        st.success(explanation)
        return pd.DataFrame({'TPL_ID' : []})
        
    result = chatbot_data.sql(sql_query).distinct().execute()
    if result.empty :
        explanation = "This query did not return any results. Please try again with a different query."
        st.warning(explanation, icon="‚ö†Ô∏è")
        st.caption("SQL Query:")
        st.code(sql_query,language = "sql") 
        if 'geom' in result.columns:
            return result.drop('geom',axis = 1)
        else: 
            return result
    elif ("TPL_ID" and "geom" in result.columns): 
        style = tpl_style(result["TPL_ID"].tolist(), paint)
        # legend, position, bg_color, fontsize = get_legend(paint)
    
        # m.add_legend(legend_dict = legend, position = position, bg_color = bg_color, fontsize = fontsize)
        m.add_pmtiles(pmtiles, style=style, opacity=0.5, tooltip=True, fit_bounds=True)
        m.fit_bounds(result.total_bounds.tolist())    
        result = result.drop('geom',axis = 1) #printing to streamlit so I need to drop geom
    else:   
        st.write(result)  # if we aren't mapping, just print out the data  
    
    with st.popover("Explanation"):
        st.write(explanation)
        st.caption("SQL Query:")
        st.code(sql_query,language = "sql")        
    return result

##### Chatbot 
with chatbot_container:
    with llm_left_col:
        example_query = "üëã Input query here"
        prompt = st.chat_input(example_query, key="chain", max_chars=300)

# new container for output so it doesn't mess with the alignment of llm options 
with st.container():
    if prompt: 
        st.chat_message("user").write(prompt)
        try:
            with st.chat_message("assistant"):
                with st.spinner("Invoking query..."):

                    out = run_sql(prompt,paint)
                    if ("TPL_ID" in out.columns) and (not out.empty):
                        ids = out['TPL_ID'].tolist()
                        cols = out.columns.tolist()
                        # chatbot_toggles = {
                        #         key: (True if key in cols else value) 
                        #         for key, value in chatbot_toggles.items()
                        #     }
                        # for key, value in chatbot_toggles.items():
                        #     st.session_state[key] = value  # Update session state
                    else:
                        ids = []
        except Exception as e:
            error_message = f"ERROR: An unexpected error has occured with the following query:\n\n*{prompt}*\n\n which raised the following error:\n\n{type(e)}: {e}\n"
            st.warning("Please try again with a different query", icon="‚ö†Ô∏è")
            st.write(error_message)
            st.stop()


if 'out' not in locals():
    m.add_pmtiles(pmtiles, style=tpl_style(unique_ids, paint), opacity=0.5, tooltip=True, fit_bounds=True)
    # legend, position, bg_color, fontsize = get_legend(paint)
    # m.add_legend(legend_dict = legend, position = position, bg_color = bg_color, fontsize = fontsize)
    #zoom to state(s)
    fit_bounds(state_choice, county_choice, m)

## Render display panels
# 
m.to_streamlit()
with st.expander("üîç View/download data"): # adding data table  
    if 'out' not in locals():
        st.dataframe(gdf.drop('geom').head(100).execute(), use_container_width = True)  
    else:
        st.dataframe(out, use_container_width = True)


public_dollars, private_dollars, total_dollars = tpl_summary(gdf)
public_delta, private_delta = calc_delta(gdf)
# -

with st.container():
    col1, col2, col3 = st.columns(3)
    col1.metric(label=f"Public", value=f"${public_dollars:,}", delta = f"{public_delta:}%")
    col2.metric(label=f"Private", value=f"${private_dollars:,}", delta = f"{private_delta:}%")
    col3.metric(label=f"Total", value=f"${total_dollars:,}")    

st.markdown('#')


col1, col2 = st.columns(2)
with col1:
    # st.markdown('Protected Area Cost')
    gdf_tpl = group_data(gdf, 'Acquisition Cost')
    get_bar(gdf_tpl, style_choice, 'year', 'total_amount', paint,'Year','Acquisition Cost ($)',"Yearly investment ($) in protected area")

with col2:
    # st.markdown('Measure Cost')
    gdf_landvote = group_data(gdf_landvote.filter(_.measure_status == 'Pass'), 'Measure Cost')
    get_bar(gdf_landvote, style_choice, 'year', 'total_amount', paint, 'Year','Funds Approved ($)','Yearly funds from conservation ballot measures')

# area_totals = get_area_totals(gdf, 'year')
# timeseries = calc_timeseries(gdf, column)


# "Total Area protected (hectares):"
# st.altair_chart(bar(area_totals, 'year', paint))

# # +

st.divider()

st.markdown('''
## Data Sources
PRIVATE DRAFT.  Developed at UC Berkeley. All data copyright to Trust for Public Land.  See <https://conservationalmanac.org/> for details.
''')
